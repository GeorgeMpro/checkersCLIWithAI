###Outline

##CLI
-check valid/invalid input by user
-check output

## board and pieces
- generate a game state
    - possible( legal moves)

## game logic
    - game logic class
        possible moves and board interaction
    - game state class
        moves, turn etc

## data
- add game status
-game in progress


## players
todo
WHITE_KING = "♔"
BLACK_KING = "♚"

## rules
- rules prompt to the user
	- maybe read from file
- have to eat
- yes/no double eat
-king ( can move whole diagonal and stop anytime, international rules)

## game logic
-keep game moves
    - undo/redo
    -display moves at game end

## Game Play
- error handling when game loop is active
    - error handling to decide whatever the move is possible and if to add it to a list or similar object to pass to player or AI
- track turns
- game end criteria
- indicate if it's player 1 or 2
- game loop
- you play vs AI
- AI vs AI
    - choose ai type
    - choose speed of game?
-possible moves
    - illegal moves gives a prompt but does not execute
    - no more moves we get a draw? a win?
    - win condition - no more moves/captured all opponent pieces

### AI
- go over generators with search algorithms and lazy loading
        lazy exploration
- a short prompt what this agent/AI/neural network ( alphazero) or python library with forward checking
- tree expansion
    - win condition/leafs
#start with vs A*
        - use lazy exploration
# MinMax + alpha beta pruning( saving time)
    - player choose depth ( with warning it take more time)?
    - explain benefit of pruning
    - precalculate at first
    -increase depth of search when further in the game and fewer pieces
    -create an opening book?
#MonteCarloTreeSearch + backpropogation
# neural network with self training ( vs itself)+ use

" Neural Network for Policy and Value Function (High Difficulty)
You’ll need a neural network that acts as both a policy (predicting the best move) and a value function (predicting the expected outcome of a game from a given state).
For a junior level, you could use a simple neural network library like TensorFlow or PyTorch, focusing on basic concepts like feedforward networks. The architecture would likely be much simpler than the AlphaZero model for Go.
"

## general

## A*


##Host
- check out hosting this on replit for CLI based game

##README
-instructions for setting up the project locally
-Add images, GIFs, demo video that shows gameplay in action.
-command examples to run the game.


##Optional
- add a history file
    - find a way to display or go over (json?)
    1. local save history of moves for a file
    2. use a server
